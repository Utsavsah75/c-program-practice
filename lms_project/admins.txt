void add_student() {
    int n;
    printf("Number of students to add: ");
    scanf("%d", &n);
    getchar();  // Clear newline left by scanf

    FILE *f = fopen("students.txt", "a+");
    FILE *u = fopen("users.txt", "a+");

    if (f == NULL || u == NULL) {
        printf("Error opening file.\n");
        return;
    }

    for (int i = 0; i < n; i++) {
        struct Student s;

        printf("\nStudent %d:\n", i + 1);

        printf("Enter name: ");
        fgets(s.name, sizeof(s.name), stdin);
        s.name[strcspn(s.name, "\n")] = '\0';

        // Generate random ID
        sprintf(s.id, "STD%d", 1000 + rand() % 9000);

        printf("Enter username: ");
        fgets(s.username, sizeof(s.username), stdin);
        s.username[strcspn(s.username, "\n")] = '\0';

        printf("Enter password: ");
        get_password(s.password, sizeof(s.password));

        printf("Enter email: ");
        scanf("%s", s.email);

        printf("Enter phone: ");
        scanf("%s", s.phone);
        getchar();  // Clear newline

        printf("Enter address: ");
        fgets(s.address, sizeof(s.address), stdin);
        s.address[strcspn(s.address, "\n")] = '\0';

        printf("Enter age: ");
        scanf("%d", &s.age);
        getchar();  // Clear newline

        // Write student record
        fprintf(f, "Name:-%s|ID:-%s|UserName:-%s|Password:-%s|Email:-%s|Phone:-%s|Address:-%s|Age:-%d\n",
                s.name, s.id, s.username, s.password,
                s.email, s.phone, s.address, s.age);

        // Save to user credentials file (optional)
        fprintf(u, "%s|%s|student\n", s.username, s.password);

        printf("Student added successfully with ID: %s\n", s.id);
    }

    fclose(f);
    fclose(u);
}
void issue_book() {
    char book_title[100], book_author[50], book_isbn[20];
    char student_name[50], student_id[10], student_phone[20];

    printf("Enter Book Title: ");
    fgets(book_title, sizeof(book_title), stdin);
    book_title[strcspn(book_title, "\n")] = '\0';

    printf("Enter Book Author: ");
    fgets(book_author, sizeof(book_author), stdin);
    book_author[strcspn(book_author, "\n")] = '\0';

    printf("Enter Book ISBN: ");
    fgets(book_isbn, sizeof(book_isbn), stdin);
    book_isbn[strcspn(book_isbn, "\n")] = '\0';

    printf("Enter Student Name: ");
    fgets(student_name, sizeof(student_name), stdin);
    student_name[strcspn(student_name, "\n")] = '\0';

    printf("Enter Student ID: ");
    fgets(student_id, sizeof(student_id), stdin);
    student_id[strcspn(student_id, "\n")] = '\0';

    printf("Enter Student Phone: ");
    fgets(student_phone, sizeof(student_phone), stdin);
    student_phone[strcspn(student_phone, "\n")] = '\0';

    // Step 1: Verify and update book record
    FILE *f_book = fopen("books.txt", "r");
    FILE *f_temp = fopen("temp_books.txt", "w");
    if (!f_book || !f_temp) {
        printf("Error opening book files.\n");
        if (f_book) fclose(f_book);
        if (f_temp) fclose(f_temp);
        return;
    }

    struct Book b;
    int book_found = 0;
    while (fscanf(f_book, "%[^|]|%[^|]|%[^|]|%[^|]|%d|%d\n",
                  b.title, b.author, b.publisher, b.isbn,
                  &b.year, &b.copies) == 6) {
        if (!book_found &&
            strcmp(b.title, book_title) == 0 &&
            strcmp(b.author, book_author) == 0 &&
            strcmp(b.isbn, book_isbn) == 0 &&
            b.copies > 0) {
            book_found = 1;
            b.copies--;
            printf("Book found: '%s' by %s\n", b.title, b.author);
        }
        fprintf(f_temp, "%s|%s|%s|%s|%d|%d\n",
                b.title, b.author, b.publisher, b.isbn, b.year, b.copies);
    }

    fclose(f_book);
    fclose(f_temp);

    if (!book_found) {
        printf("Book not found or no copies available.\n");
        remove("temp_books.txt");
        return;
    }

    // Step 2: Verify student
    FILE *f_student = fopen("students.txt", "r");
    if (!f_student) {
        printf("Error opening students file.\n");
        remove("temp_books.txt");
        return;
    }

    struct Student s;
    int student_found = 0;
    while (fscanf(f_student, "%[^|]|%[^|]|%[^|]|%[^|]|%[^|]|%[^|]|%[^|]|%d\n",
                  s.name, s.id, s.username, s.password,
                  s.email, s.phone, s.address, &s.age) == 8) {
        if (strcmp(s.name, student_name) == 0 &&
            strcmp(s.id, student_id) == 0 &&
            strcmp(s.phone, student_phone) == 0) {
            student_found = 1;
            break;
        }
    }
    fclose(f_student);

    if (!student_found) {
        printf("Student not found. Book issue cancelled.\n");
        remove("temp_books.txt");
        return;
    }

    // Step 3: Update books.txt
    remove("books.txt");
    rename("temp_books.txt", "books.txt");

    // Step 4: Save issue record
    struct IssueRecord record;
    strcpy(record.student_id, student_id);
    strcpy(record.student_name, student_name);
    strcpy(record.student_phone, student_phone);
    strcpy(record.book_isbn, book_isbn);
    strcpy(record.book_title, book_title);
    strcpy(record.book_author, book_author);
    time(&record.issue_date);
    record.return_date = 0;
    record.fine = 0.0;

    save_issue(&record);
    printf("Book issued successfully to %s (ID: %s).\n", student_name, student_id);
}